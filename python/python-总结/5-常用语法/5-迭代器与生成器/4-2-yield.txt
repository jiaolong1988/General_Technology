'''
生成器会返回一个迭代器，用于遍历数据.在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值,
并在下一次执行 next() 方法时从当前位置继续运行。

迭代器是每次可以返回一个对象元素的对象，例如返回一个列表。我们到目前为止使用的很多内置函数（例如 enumerate）都会返回一个迭代器。
迭代器是一种表示数据流的对象。这与列表不同，列表是可迭代对象，但不是迭代器，因为它不是数据流。
生成器是使用函数创建迭代器的简单方式。也可以使用类定义迭代器.

为何要使用生成器？
你可能会疑问，为何要使用生成器，而不使用列表。下面这段摘自 stack overflow 页面 的内容回答了这个问题：
	生成器是构建迭代器的 “懒惰” 方式。当内存不够存储完整实现的列表时，或者计算每个列表元素的代价很高，你希望尽量推迟计算时，就可以使用生成器。但是这些元素只能遍历一次。

另一种详细的解释如下：

	由于使用生成器是一次处理一个数据，在内存和存储的需求上会比使用list方式直接全部生成再存储节省很多资源。

	由此区别，在处理大量数据时，经常使用生成器初步处理数据后，再进行长期存储，而不是使用 list。因为无论使用生成器还是 list，都是使用过就要丢弃的临时数据。既然功能和结果一样，那就不如用生成器。

	但是生成器也有自己的局限，它产生的数据不能回溯，不像list可以任意选择。

https://softwareengineering.stackexchange.com/questions/290231/when-should-i-use-a-generator-and-when-a-list-in-python/290235
https://softwareengineering.stackexchange.com/questions/273551/should-i-prefer-python-generators-to-lists

range(start, stop[, step]) -> range object
https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks
'''

print('----------------迭代器iterator-----------------------')
l = [1, 2, 3, 4]
it = iter(l)    # 创建迭代器对象
print('迭代器对象：', type(it))
print('迭代器 next():', next(it))   # 输出迭代器的下一个元素

generType = (i for i in range(4))
print('创建生成器：', type(generType))

print('-------------------yield生成器：返回元组--------------------------')
lessons = ["Why Python Programming", "Data Types and Operators", "Control Flow", "Functions", "Scripting"]
def my_enumerate(iterable, start=0):
    count = start
    for element in iterable:
        yield count, element
        count += 1

for i, lesson in my_enumerate(lessons, 1):
    print("Lesson {}: {}".format(i, lesson))

print('----------------生成器-----------------------')
'''
如果可迭代对象太大，无法完整地存储在内存中（例如处理大型文件时），每次能够使用一部分很有用。
实现一个生成器函数 chunker，接受一个可迭代对象并每次生成指定大小的部分数据。
'''
def chunker(iterable, size):
    """Yield successive chunks from iterable of length size."""
    for i in range(0, len(iterable), size):
        yield iterable[i: i+size]

for chunk in chunker(range(25), 4):
    print(list(chunk))
