'''
注意: 
    类的所有方法中，第一个参数必须为 self，self代表类的实例，而非类
    __init__(self) 类的构造方法，该方法在类实例化时会自动调用。
    在类中 __开头的属性、或方法都代表是 私有属性或方法。
'''


# 类的定义
class People:
    # 定义类的公共属性
    name= ''
    age = 0
    # 定义私有属性，私有属性在类的外部无法访问
    __weight = 0

    def __init__(self, n, a, w):
        self.name = n
        self.age = a
        self.__weight = w
        print('People 的构造方法')

    #自定义方法
    def speak(self):
        print('speak()方法 self: ', self)
        print('speak()方法  self代表的类: ', self.__class__)
        print('speak()方法%s 说：我 %d 岁。' %(self.name, self.age))

# 实例化类
x = People('jiaolong',30,55)
print("People 类的name属性为：", x.name)
x.speak()

print('============类的继承==============')
#类的继承
class Student(People):
    grade = ''
    def __init__(self, n, a, w, g):
        print('Student 的构造方法')
        People.__init__(self, n, a, w)
        self.grade = g

    def speak(self):
         print('%s 说：我 %d 岁,我在读 %d 年级' %(self.name, self.age, self.grade))

s = Student('jiaona', 28, 120, 5)
s.speak()

print('============方法重写==============')
# 方法重写
class Parent:
    def myMethod(self):
        print('调用父类方法')

class Child(Parent):
    def myMethod(self):
        print('调用子类方法')
c = Child()

# 调用子类方法
c.myMethod()
# 调用父类方法
super(Child,c).myMethod()

print('============定义私有属性与方法==============')
# 定义私有属性与方法
class Site:
    name = ''   #公共变量
    __url = ''  #私有变量

    #构造方法
    def __init__(self, name, url):
        self.name = name
        self.__url = url
		

    # 公共方法
    def foo(self):
        print('这是公共方法')
        self.__pinfo()

    # 私有方法
    def __pinfo(self):
        print('这是私有方法')

x = Site("python练习",'www.baidu.com')
x.who()
x.foo()

print('============定义静态方法、类方法==============')
#定义静态方法、类方法
class classname:
    @staticmethod
    def sfun():
        print('静态方法')

    @classmethod
    def cfun(cls):
        print('类的名称为：',cls)

    def gfun(self):
        print('普通方法')

classname.sfun()
classname.cfun()
#classname.gfun() 无法访问
